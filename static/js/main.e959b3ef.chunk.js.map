{"version":3,"sources":["components/favoriteItems/favoriteItems.module.css","components/displayList/displayItem/displayItem.module.css","components/search/search.module.css","containers/header/header.module.css","components/ui/button/button.module.css","components/displayList/displayList.module.css","containers/manageSearch/manageSearch.module.css","components/ui/button/button.js","components/search/search.js","components/displayList/displayItem/displayItem.js","redux-store/actions/favoritesActions.js","redux-store/actions/actionTypes.js","components/displayList/displayList.js","containers/manageSearch/manageSearch.js","redux-store/actions/apiDataActions.js","components/favoriteItems/favoriteItems.js","containers/header/header.js","App.js","serviceWorker.js","redux-store/reducers/apiDataReducer.js","redux-store/reducers/favoritesReducer.js","redux-store/store.js","index.js"],"names":["module","exports","Button","onClickHandler","submit","alt","disabled","props","type","className","classes","Alt","onClick","children","SearchOptions","searchTerm","resultsPerPage","pageNumber","Search","totalRecords","clickHandler","searchTermRef","useRef","resultsPerPageRef","pageNumberRef","useState","pages","setPages","useEffect","pageCount","Math","ceil","current","value","tempPages","counter","push","Container","InputContainer","htmlFor","name","TextInput","ref","placeholder","onChange","map","item","index","key","length","event","preventDefault","DisplayItem","address","city","image_url","isFavorite","Img","src","Info","Name","Address","City","removeFromFavorites","id","payload","DisplayList","records","useSelector","state","apiData","favoriteItems","favoritesData","dispatch","useDispatch","addToFavorites","addFavorite","result","undefined","find","API_URL","ManageSearch","searchQuery","setSearchQuery","loading","setLoading","perPage","currentPage","pagination","setPagination","fetchResponseHandler","useCallback","data","saveApiResponseToStore","url","replace","fetch","then","response","json","error","Error","restaurants","r","total_entries","per_page","current_page","catch","console","searchObject","FavoriteItems","show","Hide","Favorites","TextContent","RemoveButton","Header","toggleShow","setToggleShow","itemCount","prevState","HeaderText","ButtonContainer","App","Boolean","window","location","hostname","match","INITIAL_STATE","apiDataReducer","action","addItem","itemToAdd","c","favoritesReducer","filter","rootReducer","combineReducers","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.e959b3ef.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"favoriteItems_Container__1b04g\",\"Hide\":\"favoriteItems_Hide__20Jq1\",\"Favorites\":\"favoriteItems_Favorites__3m94u\",\"TextContent\":\"favoriteItems_TextContent__32_I6\",\"Name\":\"favoriteItems_Name__2TAaV\",\"Address\":\"favoriteItems_Address__3X4s5\",\"City\":\"favoriteItems_City__3bViK\",\"RemoveButton\":\"favoriteItems_RemoveButton__2b4RM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"DisplayItem\":\"displayItem_DisplayItem__1Un9M\",\"Img\":\"displayItem_Img__1nJXk\",\"Info\":\"displayItem_Info__2t1ub\",\"Button\":\"displayItem_Button__3JbRB\",\"Name\":\"displayItem_Name__1-0Pm\",\"Address\":\"displayItem_Address__14gJ7\",\"City\":\"displayItem_City__1TkLp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"search_Container__2Il_U\",\"InputContainer\":\"search_InputContainer__3uT_B\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Header\":\"header_Header__2lI_C\",\"HeaderText\":\"header_HeaderText__2MVE8\",\"ButtonContainer\":\"header_ButtonContainer__3W07V\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"button_Button__1NOk3\",\"Alt\":\"button_Alt__3hVnq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"DisplayList\":\"displayList_DisplayList__3AkdP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"manageSearch_Container__1px2f\"};","import React from 'react';\r\n\r\nimport classes from './button.module.css';\r\n\r\nfunction Button({ onClickHandler, submit, alt, disabled, ...props }) {\r\n\treturn (\r\n\t\t<button\r\n\t\t\ttype={submit && 'submit'}\r\n\t\t\tclassName={`${classes.Button} ${alt && classes.Alt}`}\r\n\t\t\tonClick={onClickHandler}\r\n\t\t\tdisabled={disabled}>\r\n\t\t\t{props.children}\r\n\t\t</button>\r\n\t);\r\n}\r\n\r\nexport default Button;\r\n","import React, { useRef, useState, useEffect } from 'react';\r\n\r\nimport classes from './search.module.css';\r\n\r\nimport Button from '../ui/button/button';\r\n\r\n// Configure this as required.\r\nexport const SearchOptions = {\r\n\tsearchTerm: '',\r\n\tresultsPerPage: [5, 10, 15],\r\n\tpageNumber: 1\r\n};\r\n\r\nfunction Search({ totalRecords, clickHandler }) {\r\n\tconst searchTermRef = useRef('');\r\n\tconst resultsPerPageRef = useRef(0);\r\n\tconst pageNumberRef = useRef(0);\r\n\r\n\tconst [pages, setPages] = useState([]);\r\n\r\n\tuseEffect(() => {\r\n\t\t// Dynamically set page count based on total records and records per page\r\n\t\tconst pageCount = Math.ceil(totalRecords / resultsPerPageRef.current.value);\r\n\t\tconst tempPages = [];\r\n\t\tfor (let counter = 1; counter <= pageCount; counter++) {\r\n\t\t\ttempPages.push(counter);\r\n\t\t}\r\n\t\tsetPages(tempPages);\r\n\t}, [totalRecords, resultsPerPageRef.current.value]);\r\n\r\n\tfunction onClickHandler(event) {\r\n\t\t// This prevents form from submitting.\r\n\t\tevent.preventDefault();\r\n\r\n\t\t// Read the values from the input fields only when submit button is clicked\r\n\t\tclickHandler({\r\n\t\t\tsearchTerm: searchTermRef.current.value,\r\n\t\t\tpageNumber: pageNumberRef.current.value,\r\n\t\t\tresultsPerPage: resultsPerPageRef.current.value\r\n\t\t});\r\n\t}\r\n\r\n\treturn (\r\n\t\t<form className={classes.Container}>\r\n\t\t\t<div className={classes.InputContainer}>\r\n\t\t\t\t<label htmlFor=\"search-term\">Search Term</label>\r\n\t\t\t\t<input\r\n\t\t\t\t\tname=\"search-term\"\r\n\t\t\t\t\tclassName={classes.TextInput}\r\n\t\t\t\t\tref={searchTermRef}\r\n\t\t\t\t\tplaceholder=\"enter city name\"\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t\t<div className={classes.InputContainer}>\r\n\t\t\t\t<label htmlFor=\"per-page\">Per page</label>\r\n\t\t\t\t<select\r\n\t\t\t\t\tname=\"per-page\"\r\n\t\t\t\t\tref={resultsPerPageRef}\r\n\t\t\t\t\tonChange={() => setPages([])}>\r\n\t\t\t\t\t{SearchOptions.resultsPerPage.map((item, index) => (\r\n\t\t\t\t\t\t<option key={index} value={item}>\r\n\t\t\t\t\t\t\t{item}\r\n\t\t\t\t\t\t</option>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</select>\r\n\t\t\t</div>\r\n\t\t\t<div className={classes.InputContainer}>\r\n\t\t\t\t<label htmlFor=\"go-to-page\">Go to Page</label>\r\n\t\t\t\t<select\r\n\t\t\t\t\tname=\"go-to-page\"\r\n\t\t\t\t\tref={pageNumberRef}\r\n\t\t\t\t\tdisabled={pages.length === 0}>\r\n\t\t\t\t\t{pages.map((item, index) => (\r\n\t\t\t\t\t\t<option key={index} value={item}>\r\n\t\t\t\t\t\t\t{item}\r\n\t\t\t\t\t\t</option>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</select>\r\n\t\t\t</div>\r\n\t\t\t<div className={classes.InputContainer}>\r\n\t\t\t\t<Button submit onClickHandler={onClickHandler}>\r\n\t\t\t\t\tSearch\r\n\t\t\t\t</Button>\r\n\t\t\t</div>\r\n\t\t</form>\r\n\t);\r\n}\r\n\r\nexport default Search;\r\n","import React from 'react';\r\n\r\nimport classes from './displayItem.module.css';\r\n\r\nfunction DisplayItem({ onClickHandler, ...props }) {\r\n\tconst { name, address, city, image_url, isFavorite } = props;\r\n\r\n\treturn (\r\n\t\t<div className={classes.DisplayItem}>\r\n\t\t\t<img className={classes.Img} src={image_url} alt={name} />\r\n\t\t\t<button\r\n\t\t\t\tclassName={classes.Button}\r\n\t\t\t\tonClick={() => onClickHandler({ ...props })}>\r\n\t\t\t\t{isFavorite ? 'Remove' : 'Add'}\r\n\t\t\t</button>\r\n\t\t\t<div className={classes.Info}>\r\n\t\t\t\t<label className={classes.Name}>{name}</label>\r\n\t\t\t\t<label className={classes.Address}>{address}</label>\r\n\t\t\t\t<label className={classes.City}>{city}</label>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default DisplayItem;\r\n","import * as actionTypes from './actionTypes';\r\n\r\nexport function addToFavorites(item) {\r\n\treturn {\r\n\t\ttype: actionTypes.ADD_TO_FAVORITES,\r\n\t\tpayload: item\r\n\t};\r\n}\r\n\r\nexport function removeFromFavorites(id) {\r\n\treturn {\r\n\t\ttype: actionTypes.REMOVE_FROM_FAVORITES,\r\n\t\tpayload: id\r\n\t};\r\n}\r\n","// Favorites\r\nexport const ADD_TO_FAVORITES = 'ADD_TO_FAVORITES';\r\nexport const REMOVE_FROM_FAVORITES = 'REMOVE_FROM_FAVORITES';\r\n\r\n// Api data\r\nexport const SET_API_DATA = 'SET_API_DATA';\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport DisplayItem from './displayItem/displayItem';\r\n\r\nimport { addToFavorites, removeFromFavorites } from '../../redux-store/actions';\r\n\r\nimport classes from './displayList.module.css';\r\n\r\nfunction DisplayList(props) {\r\n\t// \"useSelector\" can be used instead of \"connect\" + \"mapStateToProps\"\r\n\tconst { records } = useSelector(state => state.apiData);\r\n\tconst { favoriteItems } = useSelector(state => state.favoritesData);\r\n\r\n\t// \"useDispatch\" can be used instead of \"connect\" + \"mapDispatchToProps\"\r\n\tconst dispatch = useDispatch();\r\n\t// Creating a local function like this is optional.\r\n\t// You can also directly call dispatch(actioncreator())\r\n\t// I prefer this extra layer of abstraction\r\n\tconst addFavorite = item => dispatch(addToFavorites(item));\r\n\tconst removeFavorite = id => dispatch(removeFromFavorites(id));\r\n\r\n\tconst onClickHandler = item => {\r\n\t\titem.isFavorite ? removeFavorite(item.id) : addFavorite(item);\r\n\t};\r\n\r\n\t// Initial value before search initiated\r\n\tlet result = null;\r\n\r\n\tif (records) {\r\n\t\t// Search returned at least one record\r\n\t\tif (records.length) {\r\n\t\t\tresult = records.map(result => (\r\n\t\t\t\t<DisplayItem\r\n\t\t\t\t\tkey={result.id}\r\n\t\t\t\t\t{...result}\r\n\t\t\t\t\tonClickHandler={onClickHandler}\r\n\t\t\t\t\tisFavorite={\r\n\t\t\t\t\t\tfavoriteItems.find(item => item.id === result.id) !==\r\n\t\t\t\t\t\t(null || undefined)\r\n\t\t\t\t\t}\r\n\t\t\t\t/>\r\n\t\t\t));\r\n\t\t} else {\r\n\t\t\t// Search returned 0 records\r\n\t\t\tresult = 'No records found!';\r\n\t\t}\r\n\t}\r\n\r\n\treturn <div className={classes.DisplayList}>{result}</div>;\r\n}\r\n\r\nexport default DisplayList;\r\n","import React, { useState, useEffect, useCallback } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport Search, { SearchOptions } from '../../components/search/search';\r\nimport DisplayList from '../../components/displayList/displayList';\r\n\r\nimport { saveApiResponseToStore } from '../../redux-store/actions';\r\n\r\nimport classes from './manageSearch.module.css';\r\n\r\n// API url\r\nconst SEARCH_TERM = 'SEARCH_TERM';\r\nconst PAGE_NUMBER = 'PAGE_NUMBER';\r\nconst RESULTS_PER_PAGE = 'RESULTS_PER_PAGE';\r\nconst API_URL = `https://opentable.herokuapp.com/api/restaurants?city=${SEARCH_TERM}&per_page=${RESULTS_PER_PAGE}&page=${PAGE_NUMBER}`;\r\n\r\nfunction ManageSearch(props) {\r\n\t// Read default values from configured options\r\n\tconst [searchQuery, setSearchQuery] = useState({\r\n\t\tsearchTerm: SearchOptions.searchTerm,\r\n\t\tpageNumber: SearchOptions.pageNumber[0],\r\n\t\tresultsPerPage: SearchOptions.resultsPerPage[0]\r\n\t});\r\n\r\n\t// Maintain state to show/hide loading indicator\r\n\tconst [loading, setLoading] = useState(false);\r\n\r\n\t// Maintain state for pagination\r\n\tconst [pagination, setPagination] = useState({\r\n\t\ttotalRecords: 0,\r\n\t\tperPage: SearchOptions.resultsPerPage[0],\r\n\t\tcurrentPage: 1\r\n\t});\r\n\r\n\t// \"useDispatch\" can be used instead of \"connect\" + \"mapDispatchToProps\"\r\n\tconst dispatch = useDispatch();\r\n\r\n\t// Handle response from api\r\n\tconst fetchResponseHandler = useCallback(\r\n\t\t(data, loading, pagination) => {\r\n\t\t\t// Reset state on receiving response from API\r\n\t\t\tdispatch(saveApiResponseToStore(data));\r\n\t\t\tsetLoading(loading);\r\n\t\t\tsetPagination(pagination);\r\n\t\t},\r\n\t\t[dispatch]\r\n\t);\r\n\r\n\tuseEffect(() => {\r\n\t\t// No need to proceed if search term not provided\r\n\t\tif (!searchQuery.searchTerm) return;\r\n\r\n\t\t// Set API dynamic query based on searchQuery\r\n\t\tconst url = API_URL.replace(SEARCH_TERM, searchQuery.searchTerm)\r\n\t\t\t.replace(PAGE_NUMBER, searchQuery.pageNumber)\r\n\t\t\t.replace(RESULTS_PER_PAGE, searchQuery.resultsPerPage);\r\n\r\n\t\t// Make api call and set value of result\r\n\t\tfetch(url)\r\n\t\t\t.then(response => response.json())\r\n\t\t\t.then(response => {\r\n\t\t\t\tif (response.error) throw Error(response.error);\r\n\r\n\t\t\t\tfetchResponseHandler(\r\n\t\t\t\t\tresponse.restaurants.map(r => ({\r\n\t\t\t\t\t\tid: r.id,\r\n\t\t\t\t\t\tname: r.name,\r\n\t\t\t\t\t\taddress: r.address,\r\n\t\t\t\t\t\tcity: r.city,\r\n\t\t\t\t\t\timage_url: r.image_url\r\n\t\t\t\t\t})),\r\n\t\t\t\t\tfalse,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttotalRecords: response.total_entries,\r\n\t\t\t\t\t\tperPage: response.per_page,\r\n\t\t\t\t\t\tcurrentPage: response.current_page\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t})\r\n\t\t\t.catch(error => {\r\n\t\t\t\tfetchResponseHandler([], false, {\r\n\t\t\t\t\ttotalRecords: 0,\r\n\t\t\t\t\tperPage: SearchOptions.resultsPerPage[0],\r\n\t\t\t\t\tcurrentPage: 1\r\n\t\t\t\t});\r\n\r\n\t\t\t\t// Log the error\r\n\t\t\t\tconsole.error(error);\r\n\t\t\t});\r\n\t}, [searchQuery, fetchResponseHandler]);\r\n\r\n\t// Updating searchQuery state will cause re-render,\r\n\t// which in turn will re-evaluate useEffect for execution\r\n\t// useEffect has deps of searchQuery, so it will execute again\r\n\tconst onClickHandler = searchObject => {\r\n\t\t// Adding setLoading(true) here to prevent unnecessary render\r\n\t\t// of DisplayList. Instead, it renders the loading message\r\n\t\tsetLoading(true);\r\n\t\tsetSearchQuery(searchObject);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className={classes.Container}>\r\n\t\t\t<p>Enter name of a city and click Search to view a list of restaurants.</p>\r\n\t\t\t<Search\r\n\t\t\t\tclickHandler={onClickHandler}\r\n\t\t\t\ttotalRecords={pagination.totalRecords}\r\n\t\t\t/>\r\n\t\t\t{loading ? (\r\n\t\t\t\t<p>Please wait while we fetch your search results...</p>\r\n\t\t\t) : (\r\n\t\t\t\t<DisplayList />\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default ManageSearch;\r\n","import * as actionTypes from './actionTypes';\r\n\r\nexport function saveApiResponseToStore(data) {\r\n\treturn {\r\n\t\ttype: actionTypes.SET_API_DATA,\r\n\t\tpayload: data\r\n\t};\r\n}\r\n","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport { removeFromFavorites } from '../../redux-store/actions';\r\n\r\nimport classes from './favoriteItems.module.css';\r\n\r\nfunction FavoriteItems({ favoriteItems, show }) {\r\n\t// Remove item from favorites list\r\n\t// \"useDispatch\" can be used instead of \"connect\" + \"mapDispatchToProps\"\r\n\tconst dispatch = useDispatch();\r\n\t// Creating a local function like this is optional.\r\n\t// You can also directly call dispatch(actioncreator())\r\n\t// I prefer this extra layer of abstraction\r\n\tconst removeFavorite = id => dispatch(removeFromFavorites(id));\r\n\r\n\treturn (\r\n\t\t<div className={`${classes.Container} ${show || classes.Hide}`}>\r\n\t\t\t<ul>\r\n\t\t\t\t{favoriteItems.map(item => (\r\n\t\t\t\t\t<li key={item.id}>\r\n\t\t\t\t\t\t<div className={classes.Favorites}>\r\n\t\t\t\t\t\t\t<div className={classes.TextContent}>\r\n\t\t\t\t\t\t\t\t<label className={classes.Name}>{item.name}</label>\r\n\t\t\t\t\t\t\t\t<label className={classes.Address}>{item.address}</label>\r\n\t\t\t\t\t\t\t\t<label className={classes.City}>{item.city}</label>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\t\tclassName={classes.RemoveButton}\r\n\t\t\t\t\t\t\t\tonClick={() => removeFavorite(item.id)}>\r\n\t\t\t\t\t\t\t\t&#10005;\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t))}\r\n\t\t\t</ul>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default FavoriteItems;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport classes from './header.module.css';\r\n\r\nimport FavoriteItems from '../../components/favoriteItems/favoriteItems';\r\nimport Button from '../../components/ui/button/button';\r\n\r\nconst Header = () => {\r\n\tconst [toggleShow, setToggleShow] = useState(false);\r\n\r\n\t// Read favorites list from redux store\r\n\tconst { favoriteItems } = useSelector(state => state.favoritesData);\r\n\tconst itemCount = favoriteItems.length;\r\n\r\n\tuseEffect(() => {\r\n\t\t// Set toggle show to false when favoriteItems\r\n\t\t// is empty (all the items have been removed)\r\n\t\tsetToggleShow(prevState => prevState && itemCount);\r\n\t}, [itemCount]);\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<div className={classes.Header}>\r\n\t\t\t\t<div className={classes.HeaderText}>\r\n\t\t\t\t\t<h3>Search API Template with Redux</h3>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className={classes.ButtonContainer}>\r\n\t\t\t\t\t<Button\r\n\t\t\t\t\t\talt\r\n\t\t\t\t\t\tdisabled={!itemCount}\r\n\t\t\t\t\t\tonClickHandler={() => {\r\n\t\t\t\t\t\t\tsetToggleShow(prevState => !prevState);\r\n\t\t\t\t\t\t}}>\r\n\t\t\t\t\t\t{/* <FontAwesomeIcon icon={['far', 'heart']} /> */}\r\n\t\t\t\t\t\t<span>{itemCount}</span>\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\r\n\t\t\t<FavoriteItems show={toggleShow} favoriteItems={favoriteItems} />\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport './App.css';\r\n\r\nimport ManageSearch from './containers/manageSearch/manageSearch';\r\nimport Header from './containers/header/header';\r\n\r\nfunction App() {\r\n\treturn (\r\n\t\t<div className=\"App\">\r\n\t\t\t<Header />\r\n\t\t\t{/* This is just a filler to push the main content down to prevent\r\n      any part being hidden behind the header which has fixed position */}\r\n\t\t\t<div className=\"filler\"></div>\r\n\t\t\t<ManageSearch />\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as actionTypes from '../actions/actionTypes';\r\n\r\n// type {id, name, address, city, image_url}\r\nconst INITIAL_STATE = {\r\n\trecords: null\r\n};\r\n\r\nfunction apiDataReducer(state = INITIAL_STATE, action) {\r\n\tswitch (action.type) {\r\n\t\t// SET\r\n\t\tcase actionTypes.SET_API_DATA:\r\n\t\t\treturn { ...state, records: action.payload };\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nexport default apiDataReducer;\r\n","import * as actionTypes from '../actions/actionTypes';\r\n\r\nexport const addItem = (favoriteItems, itemToAdd) => {\r\n\tconst existingItem = favoriteItems.find(c => c.id === itemToAdd.id);\r\n\r\n\tif (existingItem) {\r\n\t\t// If item already exist, return same state\r\n\t\t// Note: This scenario will not happen. Just a fail safe\r\n\t\treturn favoriteItems;\r\n\t} else {\r\n\t\t// Else, return a copy of state with new item added\r\n\t\treturn [...favoriteItems, itemToAdd];\r\n\t}\r\n};\r\n\r\n// type {id, name, address, city, image_url}\r\nconst INITIAL_STATE = {\r\n\tfavoriteItems: []\r\n};\r\n\r\nfunction favoritesReducer(state = INITIAL_STATE, action) {\r\n\tswitch (action.type) {\r\n\t\t// ADD\r\n\t\tcase actionTypes.ADD_TO_FAVORITES:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tfavoriteItems: addItem([...state.favoriteItems], action.payload)\r\n\t\t\t};\r\n\t\t// REMOVE\r\n\t\tcase actionTypes.REMOVE_FROM_FAVORITES:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tfavoriteItems: state.favoriteItems.filter(\r\n\t\t\t\t\titem => item.id !== action.payload\r\n\t\t\t\t)\r\n\t\t\t};\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nexport default favoritesReducer;\r\n","import { combineReducers, createStore } from 'redux';\r\n\r\nimport apiDataReducer from './reducers/apiDataReducer';\r\nimport favoritesReducer from './reducers/favoritesReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n\tapiData: apiDataReducer,\r\n\tfavoritesData: favoritesReducer\r\n});\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { Provider } from 'react-redux';\r\nimport store from './redux-store/store';\r\n\r\nReactDOM.render(\r\n\t<Provider store={store}>\r\n\t\t<App />\r\n\t</Provider>,\r\n\tdocument.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}